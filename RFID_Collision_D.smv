-- This application models an RFID system, specifically
-- it models and verifies the basic anti-collision algorithm for readers.
-- The system is represented by a reader and a number N of tags available
-- for communication with the reader.

-- The reader sends signals to certain tags within its range,
-- which can only respond through such a request.
-- In the chosen level of abstraction, the signal sent by the Reader is represented by
-- a sequence of bits that dynamically changes until the end of the algorithm,
-- that is, when all the tags have been identified.
-- A tag will be identified if and only if it is the only one to have received the signal from the reader,
-- namely when its ID matches that in the signal.

-- MAIN MODULE
MODULE main 
    VAR 
        reader : Reader(tag1, tag2, tag3, tag4, tag5, tag6, tag7, tag8);
        tag1   : Tag(reader, -1, -1, -1, 0, 0);
        tag2   : Tag(reader, -1, -1,  0, 1, 0); 
        tag3   : Tag(reader, -1, -1,  1, 1, 0);
        tag4   : Tag(reader, -1, -1,  0, 0, 1);
        tag5   : Tag(reader, -1, -1,  1, 0, 1);
        tag6   : Tag(reader, -1,  0,  1, 1, 1);
        tag7   : Tag(reader,  0,  1,  1, 1, 1);
        tag8   : Tag(reader,  1,  1,  1, 1, 1);

    -- PROPERTIES
    -- The following properties are verified using the NuSMV model checker.

    -- Reachability:
    -- Checks that there's a state where, if a tag is starts transmitting, at one poit it will be found.
    CTLSPEC 
        EF((tag1.state = transmitting) -> (tag1.state = found))

    CTLSPEC 
        EF((tag2.state = transmitting) -> (tag2.state = found))

    CTLSPEC 
        EF((tag3.state = transmitting) -> (tag3.state = found))

    -- Compound Reachability:
    -- Checks that there's a state where, after the signal is sent, the tag starts transmitting.
    LTLSPEC
        F(reader.state = signal & X tag1.state = transmitting)

    -- Liveness
    -- In every state of the system if all 8 tags have been identified then there must exist a future path in 
    -- which the reader reaches the end state.
    CTLSPEC 
        AG(((tag1.state = found) & (tag2.state = found) & 
            (tag3.state = found) & (tag4.state = found) & 
            (tag5.state = found) & (tag6.state = found) & 
            (tag7.state = found) & (tag8.state = found) -> AF((reader.state = end)))) 
    CTLSPEC
        AG (tag1.state = wait -> AF reader.state = signal)

    -- Liveness (conditioned on the next round X):
    -- Whenever the system reaches a state where all tags have been read, the next step must bring the reader 
    -- into the terminating state.
    CTLSPEC
        AG((reader.tags_left = 0) -> AX(reader.state = end))

    -- Regardless of the state the system is in, it is always possible to reach a future where only one tag is 
    -- present, and the reader knows that it's either the last one, or an unique one.
    CTLSPEC 
        AG((tag1.is_present + tag2.is_present + 
            tag3.is_present + tag4.is_present + 
            tag5.is_present + tag6.is_present + 
            tag7.is_present + tag8.is_present = 1) -> AX(reader.state = unique_tag_detected | reader.state = end))

    -- Strong Fairness
    -- Regardless of the state the system is in, it is always possible to reach a future where all tags have been read and the reader is in the terminating state.
    CTLSPEC
        AG AF(reader.tags_left = 0 & reader.state = end)

MODULE Reader(tag1, tag2, tag3, tag4, tag5, tag6, tag7, tag8) 
    VAR 
        state           : {signal, wait, idle, collision, unique_tag_detected, end}; 
        tags_left       : 0..8; -- number of tags left to be read
        address         : array 0..4 of -1..1; -- address of the tag to be read

    DEFINE
        -- check the number of tags in this node
        tag_count := tag1.is_present + tag2.is_present + 
                     tag3.is_present + tag4.is_present + 
                     tag5.is_present + tag6.is_present + 
                     tag7.is_present + tag8.is_present;
        -- check if there is a collision
        no_collision := (state = unique_tag_detected | state = idle);

    ASSIGN
        init(state) := signal;
        next(state) := 
        case
            tags_left = 0 : end;  -- if all tags have been read, the reader terminates
            state = signal : wait; -- wait for the tags to respond
            state = wait & tag_count = 1 : unique_tag_detected; -- if only one tag is present, it is unique
            state = wait & tag_count > 1 : collision; -- if more than one tag is present, there is a collision
            state = wait & tag_count = 0 : idle; -- if no tag is present, the reader goes idle
            state = idle | state = collision | state = unique_tag_detected : signal; -- send the signal again
            TRUE  : state; 
        esac;

        init(tags_left) := 8;
        next(tags_left) := 
        case
            -- if a tag is found, decrease the number of tags left
            state = unique_tag_detected & tags_left > 0 : tags_left - 1; 
            TRUE : tags_left;
        esac;    

        init(address[0]) := -1;
        next(address[0]) := 
        case 
            state = collision : 0;
            no_collision & address[0] != 0 & address[1] != 0 & address[2] != 0 & address[3] != 0 & address[4] != 0 : -1;
            no_collision & address[0] = 0 : 1; 
            TRUE : address[0]; 
        esac; 

        init(address[1]) := -1;
        next(address[1]) := 
        case 
            state = collision & address[0] != -1 : address[0];
            no_collision & address[0] = 1 & address[1] = 1 & address[2] = 1 & address[3] = 1 : -1;
            no_collision & address[0] = 1 & address[1] = 1 & address[2] = 1 & address[3] = 0 : address[4]; 
            no_collision & address[0] = 1 & address[1] = 1 & address[2] = 0 : address[3]; 
            no_collision & address[0] = 1 & address[1] = 0 : address[2]; 
            TRUE : address[1]; 
        esac; 

        init(address[2]) := -1;
        next(address[2]) := 
        case 
            state = collision & address[0] != -1 : address[1];
            no_collision & address[0] = 1 & address[1] = 1 & address[2] = 1 : -1; 
            no_collision & address[0] = 1 & address[1] = 1 & address[2] = 0 : address[4]; 
            no_collision & address[0] = 1 & address[1] = 0 : address[3]; 
            TRUE : address[2];
        esac; 

        init(address[3]) := -1;
        next(address[3]) := 
        case 
            state = collision & address[0] != -1 : address[2];
            no_collision & address[0] = 1 & address[1] = 1 & address[2] != 1 : -1; 
            no_collision & address[0] = 1 & address[1] = 0 : address[4]; 
            TRUE : address[3]; 
        esac; 

        init(address[4]) := -1;
        next(address[4]) := 
        case 
            state = collision & address[0] != -1 : address[3];
            no_collision & address[0] = 1        : -1;
            TRUE                                 : address[4];
        esac;

MODULE Tag(reader, b0, b1, b2, b3, b4)
    VAR 
        state : {wait, transmitting, checking_uniqueness, found};
        is_present : 0..1;

    DEFINE 
        tree_level :=     
            case
                reader.address[4] != -1 : 4;
                reader.address[3] != -1 : 3;
                reader.address[2] != -1 : 2;
                reader.address[1] != -1 : 1;
                reader.address[0] != -1 : 0;
                TRUE : -1;
            esac;

        address_equal := ((tree_level >= 0 -> reader.address[tree_level]     = b4)  &
                          (tree_level > 0  -> reader.address[tree_level - 1] = b3)  &
                          (tree_level > 1  -> reader.address[tree_level - 2] = b2)  &
                          (tree_level > 2  -> reader.address[tree_level - 3] = b1)  &
                          (tree_level > 3  -> reader.address[tree_level - 4] = b0)) | 
                           tree_level = -1;

    ASSIGN
        init(state) := wait;
        next(state) := 
        case
            reader.state = signal & state = wait & address_equal : transmitting;
            state = transmitting : checking_uniqueness;
            reader.state = unique_tag_detected & state = checking_uniqueness : found;
            reader.state != unique_tag_detected & state = checking_uniqueness : wait;
            TRUE : state; 
        esac;

        init(is_present) := 0;
        next(is_present) := 
        case
            reader.state = signal & state = wait & address_equal : 1; 
            TRUE : 0;
        esac;   

